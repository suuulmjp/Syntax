자바스크립트
    웹 브라우저에서 사용하기 위하여 만들어진 프로그래밍 언어
    발전해서 웹브라우저 상의 동적인 ui뿐만 아니라 node.js런타임을 통하여
    서버쪽에서도 사용할수있게 됨



런타임  -> 실행환경
    body끝 부분에 script 연결(자바스크립트파일).
    <script src="만든JS파일.js"></script>

    함수(function)

        function 함수명(매개변수) {
        }
        중복을 줄이기 위해 만들어서 사용함        
        함수를 작성해두고 사용시 유지보수가 쉬움
        매개변수는 없거나 1개, 2개 이상 일 수도 있음
        한번에 한 작업만 하는 함수를 만드는게 좋음
        네이밍은 알아보기 쉽게

    화살표함수(arrow function)
        =>
        익숙해질때까지 연습필요..

웹소켓(node관련 내용- 나중에 공부예정)
        서버로부터 먼저 연락이 오고, 연결이 유지가 됨.
        변화를 감지하고 알아서 대응해줌.


변수     선언-> (console.log 로)출력
        연산은 숫자만 가능(string은 안된다는 말)

        변수의 데이터타입
        Number      상수( +정수,소수)
        String      문자열
        Null        변수 안에 값이 없음
        Undefined   변수에 값을 지정한적이없음
        Boolean     논리(true, false)
        Object      객체(콘솔도 객체임)
        Array       배열(List라고도 말함)
        Function    함수

        선언방식
        Number, String, Boolean 값 참조형/ let으로 선언
        Array, Object, Function 주소 참조형/ const로 선언

        Number타입   연산가능, 
                    a**2    a의 2승, 
                    a%3     a를3으로 나눈 나머지

                i++ i에 하나씩 추가
        
        String타입  연산불가능
                    
                    템플릿리터럴            표현식을 내장할 수 있는 문자열 표현법
                                         ${}사용해서 문자열 내용에 데이터를 삽입
                    ${} 플레이스홀더

                    ``  백틱(Backtick) 이용해서 표현함 

                    console.log(`
                    $(변수 등 입력)`)
    
         캐스팅 casting 데이터 타입을 바꾸는 것
                    1.직접적 캐스팅- Number(), String(), Boolean() 등.. 
                        명시적변환 - 문자열이 아닌 값을 문자열로 반환
                                    숫자가 아닌 값을 숫자타입으로 변환
                                    논리타입이 아닌 값을 논리타입으로 변환
                                    
                    2.암묵적 캐스팅(간접적)- 자동으로 바뀜  String->Number->Boolean 순서
                    

    값참조, 주소참조    
            주소참조는 주소만 복사하기 때문에 
            실질적으로 복사된 것이 아닌 
            (같은 것을 가리키는 )참조하는 변수만 생긴 것

            주소참조는 얕은복사가 되고 깊은 복사를 하려면 추가로 작업해줘야함(String화 => pasing)
        변수는 let  
        상수는 const
        변수는 변할 수 있는 값, 상수는 변하지 않는 값

    OOP (Object Oriented Programming) 객체지향프로그래밍
                        프로그램을 수많은 '객체(object)'라는 기본 단위로 나누고 이들의 상호작용으로 서술하는 방식
                        객체란 하나의 역할을 수행하는 '메소드와 변수(데이터)'의 묶음으로 봐야 한다.

                        코드를 작성하는 방법
                        코드를 정리하는 방법
                        데이터에 대한 생각, 구조 방식
                        인간은 객체지향방식으로 생각함

    object는 key와 value로 이뤄져있음

    복제와 참조는 다른 개념.

    얕은복사 shallow copy   주소참조    Object, Array         가리키는 대상의 값이 바뀌면 다 같이 바뀌고
    깊은복사 deep copy  값 참조 String, Number, Boolean                       바껴도 복사된 값은 따로 

        *Object, Array의 깊은 복사 방법
            1.자바스크립트의 내장클래스 JSON의 stringify(안에값)
                안에값 부분에 값을 넣으면 String으로 바꿔줌 = String이 아닌것을 String화 시키는 것
            2.이후 stringify 부분을 다시 JSON.parse로 감싸기 = String화 된 것을 다시 Object로 만듦
                *parsing이란 해석하는것

            ex) let c = JSON.parse(JSON.stringify(변수명))
            
    
            
    [배열타입 Array]        const    
           순서가 있는 컬렉션을 저장할 때 쓰는 자료구조
                        Array는 []대괄호를 사용
                        하나의 변수에 여러개의 값을 넣고 인덱스로 구분, 인덱스와 벨류를 매칭, 순서가 있음
                            JS에서는 자료형 관계없이 다 넣을 수 있음(섞어서 넣어도 됨)
                        배열의 시작은 0번째부터(1번째가 아님)
                        자바스크립트 변수명 표기법 (카멜 케이스)

                배열 추가 방법
                배열명[추가할배열번호 n번째] = "추가할배열값";

                배열명.push("추가 할 배열값");     배열 가장 뒤에 요소 추가 
                배열명.unshift("추가 할 배열값");     배열 가장 앞에 요소를 추가
                배열명.pop();     배열 가장 마지막 요소를 제거
                배열명.shift();     배열 가장 앞에 요소를 제거
                배열명.splice(n번째인덱스, m개);     배열의 n번째 인덱스부터 m개의 인덱스를 지정해서 제거

    [객체타입 Object]    const 
                        Object는 {}중괄호를 사용
                        key와 value가 쌍을 이루고 있음
                        하나의 변수에 여러개의 값을 넣고 키로 구분, 키와 벨류를 매칭, 순서가 없음
                        *object안에 배열 선언도 가능함 , object안에 또 다른 object를 선언하는 것도 가능

                         객체지향
                         class -  여러개의 객체를 만들기 위한 붕어빵틀, 이걸로 객체를 찍어냄

                         최근엔 객체에서 함수로 프로그래밍을 하는 추세로 넘어갔음- 나중에 알게 됨

    카멜 케이스 (camelCase) - 첫번째 단어 이후 이어지는 각 단어의 첫 글자를 대문자로 쓰는 방법(첫번째단어는 소문자시작, 두번째단어대문자시작)
    스네이크 케이스 (snake_case) - 단어와 단어사이에 '_' 를 추가하여 구분하는 방법


조건문
        if  (조건 Boolean//  a ===1) {               
                참일때만 이부분 실행}                                     

        거짓일경우  else if     if부분이 참이 아닐때, 다른조건을 제시함
                    else    모든조건이 불일치할때

                            == 두개와 === 세개의 차이// ==두개는 암묵적 캐스팅 허용, ===세개는 허용안함(더 정확)
                            자바스크립트에서는 === 세개를 사용함, 반대는 !==
                                
    *두개 이상의 조건을 넣을때
         && 엠퍼센드(and) 
         앞뒤 조건이 둘다 true일 경우에만 true 반환- 둘 다 충족

         || 버티컬바(or) 
        둘 중 하나라도 true인 경우 true- 하나만 충족

    *type of
        자바스크립트는 항상 type을 체크해야함
            무슨 type인지 알려줌(체크함)        array와 object는 버그로 인해서 type of가 아닌 instance of를 써야함
        if (type of a === "number" && )
                a의 변수 타입이 number인지 한번 확인
                그리고 &&
                    ###이 경우 number 부분을 string처리 해줘야함



반복분
        for

        *object와 array는 const로 선언하기

        for (let i = 0; i < a.length; i++)  {
            if (a[i] >5){
                console.log(a[i])
            }
        }
        이런식으로 반복문 안에 if문을 넣어서 출력도 함



함수
        function plus (a,b){
            console.log(a+b)
        }
        plus(1,2)

        함수는 불러와서 사용하는 것이기 때문에
        마지막의 plus(1,2) 부분이 없으면 아무것도 실행되지 않음

        a, b를 파라미터(매개변수) 라고 함
        plus안에 들어간 1,2 를 아규먼트(인자) 라고 함

        매개변수는 변수
        인자는 전달값

        void함수- 리턴이 없는 것
        리턴이 있으면 그냥 함수
        

    화살표함수 arrow function
        기존 함수에서 Function, 식별자를 지운 뒤
        ()와 {}사이에 화살표기호 =>를 넣어주면 됨
        이후 추가로
        호출을 하기 위해 함수표현식방법으로 작성(변수에 화살표함수를 할당해줘야함)
        
        화살표함수를 사용하면 함수를 변수에 담을 수 있게 됨

            function sum(num1, num2){
                return num1 + num2;
            }

        이러한 일반 함수를 화살표함수를 사용하면

            const sum = (num1, num2) =>{
                return num1 + num2;
            }
        
        이렇게 바뀜

        return으로 반환하는걸 더 짧게 생략 가능
            const sum = (num1, num2) =>num1 + num2;
        이렇게 더 간단히 줄일 수 있음

        매개변수가 2개가 아니라 1개라면 () 소괄호 생략 가능

        객체를 반환하는 경우는
        중괄호와 리턴을 제거한 후 소괄호로 한번 감싸줘야함
                
              *함수는 호이스팅이 됨  












